import {eval_lisp, isString, isArray, isHash, isFunction, makeSF, isNumber} from '../lisp';
import {generateAggContext} from './agg'

export function generateWindowContext(v){
  let _variables = v


  function init_nested_agg_context() {
    // agg_funcs === hashmap!
  
    let agg_funcs_hashmap = generateAggContext()
    let agg_funcs =
      {
        'count':null,
        'max':null,
        'min':null,
        'avg':null,
        'count':null,
        'uniq':null,
        'sum':null,
        ...agg_funcs_hashmap
      }

    let calculate = (args) => args.map(el => (isHash(el) && (el["üßÆüé∞üôâ"] !== undefined)) ? el["üßÆüé∞üôâ"] : 0)
    let bulbulate = (args) => args.length === 0 ? 0 : Math.max(...calculate(args))
  
    let ctx = (key, val, resolveOptions) => {
        if (resolveOptions && resolveOptions.wantCallable){
          if (agg_funcs[key] === undefined){
            return (...args) => {return {"üßÆüé∞üôâ": bulbulate(args)}}
          } else {
            return (...args) => {return {"üßÆüé∞üôâ": bulbulate(args) + 1}}
          }
        } else {
          return {"üßÆüé∞üôâ":0}
        }
      }
  
    return ctx
  }

  let nested_agg_context = init_nested_agg_context()

  /* –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç = —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä sum(dt).
     –º—ã –µ—ë –¥–æ–ª–∂–Ω—ã –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä—É—á–Ω—É—é, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –º—ã –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å —Ñ–ª–∞–≥ agg!

     window(sum(dt), partition("dt","col"), order("-dt","col"), frame(null, 'current'))
  */

  // –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ç—å PARTITION BY ...
  let partition = function() {
    // –ø–æ–∫–∞ —á—Ç–æ –Ω–∞–∏–≤–Ω–æ... –Ω–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å 
    // –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ê–õ–ò–ê–°–û–í!!!
    var a = Array.prototype.slice.call(arguments)
    return `PARTITION BY ${a.join(',')}`
  }


  // –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ç—å ORDER BY ...
  let order = function() {
    // –ø–æ–∫–∞ —á—Ç–æ –Ω–∞–∏–≤–Ω–æ... –Ω–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å 
    // –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ê–õ–ò–ê–°–û–í!!!
    var a = Array.prototype.slice.call(arguments)
    return `ORDER BY ${a.join(',')}`
  }

  let frame = function(s,e) {
    throw Error(`frame() is not yet implemented`) 
  }



  let window = makeSF((ast, ctx, rs) => {
    if (!isArray(ast[0])){
      throw Error(`window() first argument must be a function!`) 
    }

    // –∏–∑-–∑–∞ —Ö–æ—Ä–æ—à–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–º—ë–Ω –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —É –Ω–∞—Å –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:
    // partition(), order(), frame() !!!
    let args = ast.slice(1).sort((a,b)=> String(b[0]).localeCompare(String(a[0])))

    // –≤—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, —ç—Ç–æ —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏—è
    let nested_count = eval_lisp(ast[0], nested_agg_context)
    nested_count = nested_count["üßÆüé∞üôâ"]

    let func_text = eval_lisp(ast[0], ctx)

    //console.log(`WINDOW: + ${func_text} AGG: ${nested_count}`)

    function over() {
      let context = [
        {
          "partition": partition,
          "order": order,
          "frame": frame
        },
        ctx
      ]
      let ret = args.map(el=>{
        let result
        if (el[0] === 'order') {
          let orderContext = [{
                "+": makeSF( (ast) => {
                  return eval_lisp(ast[0], context)
                }),
              
                "-" : makeSF( (ast) => {
                  return `${eval_lisp(ast[0], context)} DESC`
                })
              },
              context
          ]
          return eval_lisp(el, orderContext)
        } else {
          return eval_lisp(el, context)
        }
      }).join(' ')

      return ret
    }

    // FIXME!!! –∏ –µ—â—ë –∑–∞–ø–æ–ª–Ω–∏—Ç—å result!!!! –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å !!! 
    let sql = `${func_text} OVER (${over()})`


    // –µ—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞ agg —Ñ—É–Ω–∫—Ü–∏–π > 1 sum(sum(v)), —Ç–æ –±—É–¥–µ—Ç –Ω—É–∂–µ–Ω GROUP BY, –∞ –º—ã —è–≤–ª—è–µ–º—Å—è measure
    // –∏–Ω–∞—á–µ –º—ã –ø—Ä–æ—Å—Ç–æ —Å—Ç–æ–ª–±–µ—Ü...
    if (nested_count > 1) {
      _variables["_result"]["agg"] = true
    } else {
      delete _variables["_result"]["agg"] // –º—ã —Ç–æ—á–Ω–æ –Ω–µ –∞–≥—Ä–µ–≥–∞—Ç, —Ö–æ—Ç—è –±—ã–ª–∏ –≤—ã–∑–æ–≤—ã Agg —Ñ—É–Ω–∫—Ü–∏–π 
    }
    // console.log(`AGG: ${_variables["_result"]["agg"]}`)
    // FIXME: –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ —É–∂–µ –Ω–µ –Ω–∞–¥–æ, –ù–û –ø–æ –Ω–∞—à–µ–º—É —Å—Ç–æ–ª–±—Ü—É –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ç
    // _variables["_result"]["do_not_group_by"] = true


    // FIXME: —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–¥ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ running()
    //_variables["_result"]["window"] = true
    return sql
  })

 


  return {
    'window': window
  }
              
}
